"""
Django settings for CINERIUM project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kg@v0h&3d_znj7k+g5=orb_nw!s^8$-ljmf%_!$toz_91ru_4$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

# API 키
TMDB_API_KEY = '95fdc7d197e0ebacb14c6073f7a5def1'


# Application definition

INSTALLED_APPS = [
    # APP
    'accounts',
    'movies',
    'reviews',

    # DRF
    'rest_framework',
    'rest_framework.authtoken',

    # REST_AUTH
    'dj_rest_auth',
    'allauth',
    'allauth.account',

    # social login 필요 시 추가
    'django.contrib.sites',
    'allauth.socialaccount',
    'dj_rest_auth.registration',
    'allauth.socialaccount.providers.google',

    # CORS
    'corsheaders',

    # 기본 앱
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# USER MODEL
AUTH_USER_MODEL = 'accounts.User'


# 이메일 인증
ACCOUNT_EMAIL_VERIFICATION = "mandatory"  # 이메일 인증 필수
ACCOUNT_CONFIRM_EMAIL_ON_GET = True      # 이메일 인증 URL 클릭 시 바로 인증
ACCOUNT_EMAIL_REQUIRED = True           # 이메일 입력 필수
ACCOUNT_AUTHENTICATION_METHOD = 'email'  # 이메일로 로그인
ACCOUNT_USERNAME_REQUIRED = False       # username 불필수
ACCOUNT_UNIQUE_EMAIL = True            # 이메일 중복 방지

# 이메일 인증에 필요한 기본 이메일 설정
# EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"  # SMTP 백엔드 사용
EMAIL_HOST = "smtp.gmail.com"  # 이메일 호스트 (예: Gmail)
EMAIL_PORT = 587               # 이메일 포트
EMAIL_USE_TLS = True           # TLS 사용
EMAIL_HOST_USER = "rublin322@gmail.com"  # 발송 이메일 계정
EMAIL_HOST_PASSWORD = "qloq swrq luxe vhjy"  # 발송 이메일 비밀번호
DEFAULT_FROM_EMAIL = "rublin322@gmail.com"  # 기본 발신자 이메일

# social login 필요 시
SITE_ID = 1

ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = 'movies/'
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/accounts/login/'

LOGIN_URL = '/accounts/login/'  # 기본 로그인 URL
LOGOUT_URL = '/accounts/logout/'  # 기본 로그아웃 URL
LOGIN_REDIRECT_URL = '/movies/'  # 로그인 후 리디렉션 경로
LOGOUT_REDIRECT_URL = '/movies/'  # 로그아웃 후 리디렉션 경로

ACCOUNT_ADAPTER = "accounts.adapters.CustomAccountAdapter"
FRONTEND_URL = "http://localhost:5173"  # 이메일 인증 시 리디렉션할 프론트엔드 URL

# 인증 백엔드 설정
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# DRF auth settings
# Token 인증을 기본으로 사용하도록 설정
REST_FRAMEWORK = {
    # Authentication
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    # permission
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# dj-rest-auth 설정
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'accounts.serializers.CustomRegisterSerializer',
}

REST_AUTH_SERIALIZERS = {
    'USER_DETAILS_SERIALIZER': 'accounts.serializers.CustomUserDetailsSerializer',
}

# allauth 설정
ACCOUNT_ADAPTER = 'accounts.adapters.CustomAccountAdapter'


# 미디어 파일 설정 (프로필 이미지를 위해 필요)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 허용할 이미지 파일 형식
ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/jpg', 'image/png']

# 최대 업로드 크기 (2MB)
MAX_UPLOAD_SIZE = 2 * 1024 * 1024

MIDDLEWARE = [
    # auth
    'allauth.account.middleware.AccountMiddleware',


    # CORS 및 기본 미들웨어
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# CORS
CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:5173',
    'http://localhost:5173',
]

# 인증 정보 포함 허용
CORS_ALLOW_CREDENTIALS = True

# CSRF 설정
CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:5173',
    'http://localhost:5173',
]



# HTTPS를 통해서만 쿠키 전송
# CSRF_COOKIE_SECURE = True  # 프로덕션 환경
CSRF_COOKIE_SECURE = False # 개발 환경
CSRF_COOKIE_SAMESITE = 'Lax'  # 또는 'None'
CSRF_USE_SESSIONS = False
CSRF_COOKIE_HTTPONLY = False


ROOT_URLCONF = 'CINERIUM.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CINERIUM.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# MySQL로 설정
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'cinerium',  # 데이터베이스 이름
#         'USER': 'root',      # MySQL 사용자 이름
#         'PASSWORD': '1q2w3e4r%',  # MySQL 비밀번호
#         'HOST': 'localhost',   # MySQL 서버 주소 (보통 로컬은 'localhost')
#         'PORT': '3306',        # MySQL 포트 (기본값은 3306)
#         'OPTIONS': {
#             'charset': 'utf8mb4',  # UTF-8 지원
#             'connect_timeout': 60,  # Timeout 설정 (초 단위)
#         },
#     }
# }

# SQLite 코드
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# account.EmailAddress에서 조건부 제약에 대한 MySQL의 경고 무시
SILENCED_SYSTEM_CHECKS = ['models.W036']


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'